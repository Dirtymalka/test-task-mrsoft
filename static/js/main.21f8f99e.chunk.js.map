{"version":3,"sources":["components/error-indicator/index.js","components/error-indicator/error-indicator.js","components/spinner/index.js","components/spinner/spinner.js","components/app/App.js","components/app/index.js","index.js"],"names":["ErrorIndicator","className","style","maxWidth","margin","Spinner","role","App","useState","dataStrings","setDataStrings","filterStrings","setFilterStrings","inputValue","setInputValue","isCaseRegister","setIsCaseRegister","error","setError","getStrings","a","fetch","response","ok","json","result","data","filterOnSubstring","isNaN","newDataStrings","filterDataStrings","filter","string","includes","toLowerCase","useEffect","length","type","onChange","event","target","value","id","checked","prev","htmlFor","onClick","map","idx","key","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAEeA,ECAQ,WACrB,OACE,yBAAKC,UAAU,iCAAiCC,MAAO,CAACC,SAAU,QAASC,OAAQ,cACjF,yBAAKH,UAAU,aACb,wBAAIA,UAAU,cAAd,SACA,uBAAGA,UAAU,aAAb,oDCLOI,ECAC,WACd,OACE,yBAAKJ,UAAU,iCACb,yBAAKA,UAAU,qBAAqBK,KAAK,UACvC,0BAAML,UAAU,WAAhB,iB,MCuFOM,IC3FAA,EDGf,WAAgB,IAAD,EACyBC,mBAAS,IADlC,mBACNC,EADM,KACOC,EADP,OAE6BF,mBAAS,IAFtC,mBAENG,EAFM,KAESC,EAFT,OAGuBJ,mBAAS,IAHhC,mBAGNK,EAHM,KAGMC,EAHN,OAI+BN,oBAAS,GAJxC,mBAINO,EAJM,KAIUC,EAJV,OAKaR,oBAAS,GALtB,mBAKNS,EALM,KAKCC,EALD,KAOPC,EAAU,uCAAG,8BAAAC,EAAA,2IAEMC,MAFN,mFAEXC,EAFW,QAGJC,GAHI,iCAIMD,EAASE,OAJf,cAITC,EAJS,OAKff,EAAee,EAAOC,MALP,2BAQjBR,GAAS,GARQ,4CAAH,qDA4BVS,EAAoB,WACxB,GAAKC,MAAMf,IAA8B,KAAfA,EAA1B,CAGA,IAAMgB,EAAc,YAAOpB,GAC3B,GAAIM,EAAJ,CACE,IAAMe,EAAoBD,EAAeE,QAAO,SAACC,GAAD,OAAYA,EAAOC,SAASpB,MAC5ED,EAAiBkB,OAFnB,CAKA,IAAMA,EAAoBD,EAAeE,QAAO,SAACC,GAAD,OAAYA,EAAOE,cAAcD,SAASpB,EAAWqB,kBACrGtB,EAAiBkB,MAgBnB,OAbAK,qBAAU,WACRhB,MACC,IAEHgB,qBAAU,WACRR,MACC,CAACZ,IAEJoB,qBAAU,WACRvB,EAAiBH,KAChB,CAACA,IAGAQ,EACK,kBAAC,EAAD,MAGJR,EAAY2B,OAKf,yBAAKnC,UAAU,0BACb,4BAAQA,UAAU,UAChB,2BAAOA,UAAU,eAAeoC,KAAK,OAAOC,SAvDxB,SAACC,GACzBzB,EAAcyB,EAAMC,OAAOC,UAuDvB,yBAAKxC,UAAU,yBACb,2BAAOoC,KAAK,WAAWpC,UAAU,mBAAmByC,GAAG,gBAAgBC,QAAS5B,EAAgBuB,SArDjF,WACrBtB,GAAkB,SAAC4B,GAAD,OAAWA,QAqDvB,2BAAO3C,UAAU,mBAAmB4C,QAAQ,iBAA5C,oBAEF,4BAAQ5C,UAAU,yBAAyB6C,QApD1B,WACrB,IAAIlB,MAAMf,GAAV,CAGA,IACMiB,EADc,YAAOrB,GACcsB,QAAO,SAACC,GAAD,OAAYA,EAAOI,OAASvB,KAC5ED,EAAiBkB,MA8Cb,iCAAoGF,MAAMf,GAA2B,KAAbA,GACxH,4BAAQZ,UAAU,yBAAyB6C,QAASnB,GAApD,gCAAqGC,MAAMf,GAAcA,EAAa,KAAtI,MAEF,wBAAIZ,UAAU,4CACXU,EAAcoC,KAAI,SAACf,EAAQgB,GAAT,OAAiB,wBAAI/C,UAAU,kBAAkBgD,IAAKD,GAAMhB,QAf5E,kBAAC,EAAD,OEpEXkB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.21f8f99e.chunk.js","sourcesContent":["import ErrorIndicator from './error-indicator';\r\n\r\nexport default ErrorIndicator;\r\n","import React from 'react';\r\n\r\nconst ErrorIndicator = () => {\r\n  return (\r\n    <div className=\"card text-white bg-danger mb-5\" style={{maxWidth: '18rem', margin: '70px auto'}}>\r\n      <div className=\"card-body\">\r\n        <h5 className=\"card-title\">Error</h5>\r\n        <p className=\"card-text\">Something went wrong. Try to reload the page.</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorIndicator;\r\n","import Spinner from './spinner';\r\n\r\nexport default Spinner;\r\n","import React from 'react';\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div className=\"d-flex justify-content-center\">\r\n      <div className=\"spinner-border m-5\" role=\"status\">\r\n        <span className=\"sr-only\">Loading...</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import React, { useState, useEffect } from 'react';\nimport ErrorIndicator from '../error-indicator';\nimport Spinner from '../spinner';\nimport './app.css'\n\nfunction App() {\n  const [dataStrings, setDataStrings] = useState([]);\n  const [filterStrings, setFilterStrings] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [isCaseRegister, setIsCaseRegister] = useState(true);\n  const [error, setError] = useState(false);\n\n  const getStrings = async () => {\n    const url = `https://cors-anywhere.herokuapp.com/https://www.mrsoft.by/data.json`;\n    const response = await fetch(url);\n    if (response.ok) {\n      const result = await response.json();\n      setDataStrings(result.data);\n      return;\n    }\n    setError(true);\n  }\n\n  const handleInputChange = (event) => {\n    setInputValue(event.target.value);\n  }\n\n  const handleCheckBox = () => {\n    setIsCaseRegister((prev) => !prev);\n  }\n\n  const filterOnLength = () => {\n    if (isNaN(inputValue)) {\n      return;\n    }\n    const newDataStrings = [...dataStrings];\n    const filterDataStrings = newDataStrings.filter((string) => string.length > inputValue)\n    setFilterStrings(filterDataStrings);\n  }\n\n  const filterOnSubstring = () => {\n    if (!isNaN(inputValue) && inputValue !== '') {\n      return;\n    }\n    const newDataStrings = [...dataStrings];\n    if (isCaseRegister) {\n      const filterDataStrings = newDataStrings.filter((string) => string.includes(inputValue));\n      setFilterStrings(filterDataStrings);\n      return;\n    }\n    const filterDataStrings = newDataStrings.filter((string) => string.toLowerCase().includes(inputValue.toLowerCase()));\n    setFilterStrings(filterDataStrings);\n  }\n\n  useEffect(() => {\n    getStrings();\n  }, []);\n\n  useEffect(() => {\n    filterOnSubstring();\n  }, [isCaseRegister]);\n\n  useEffect(() => {\n    setFilterStrings(dataStrings)\n  }, [dataStrings])\n\n\n  if (error) {\n    return <ErrorIndicator />\n  }\n\n  if (!dataStrings.length) {\n    return <Spinner />\n  }\n\n  return (\n    <div className=\"container my-container\">\n      <header className=\"header\">\n        <input className=\"form-control\" type=\"text\" onChange={handleInputChange} />\n        <div className=\"form-group form-check\">\n          <input type=\"checkbox\" className=\"form-check-input\" id=\"exampleCheck1\" checked={isCaseRegister} onChange={handleCheckBox} />\n          <label className=\"form-check-label\" htmlFor=\"exampleCheck1\">Apply register?</label>\n        </div>\n        <button className=\"btn btn-primary button\" onClick={filterOnLength}>Show strings with length more {!isNaN(inputValue) ? inputValue : null}</button>\n        <button className=\"btn btn-primary button\" onClick={filterOnSubstring}>Show strings with substring \"{isNaN(inputValue) ? inputValue : null}\"</button>\n      </header>\n      <ul className=\"list-group list-group-flush list-strings\">\n        {filterStrings.map((string, idx) => <li className=\"list-group-item\" key={idx}>{string}</li>)}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","import App from './App';\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}